#!/bin/sh

# Common
warning_color='\033[0;33m'
no_color='\033[1;33m'

# jq

## If jq is not installed, tell the user it is a good idea to install jq
if ! command -v jq &> /dev/null
then
    echo -e "${warning_color}jq is not installed, it is a good idea to install it for better experience (sudo apt-get install jq)${no_color}"
fi

# fzf

## If fzf is not installed, tell the user it is a good idea to install fzf
if ! command -v fzf &> /dev/null
then
    echo -e "${warning_color}fzf is not installed, it is a good idea to install it for better experience (sudo apt install fzf)${no_color}"
fi

# eza

## If eza is installed, replace ls with eza, else tell the user is is a good idea to install eza
if command -v eza &> /dev/null
then
    alias ls='eza'
else
    echo -e "${warning_color}eza is not installed, it is a good idea to install it for better ls experience (https://github.com/eza-community/eza/blob/main/INSTALL.md#debian-and-ubuntu)${no_color}"
fi

# ls

alias l='ls -la'

# cat

if ! command -v batcat &> /dev/null
then
    alias cat='batcat'
else
    echo -e "${warning_color}batcat is not installed, it is a good idea to install it for better cat experience (sudo apt install bat)${no_color}"
fi


# podman

## If we do not find docker, we create an alias for podman
if ! command -v docker &> /dev/null
then
    alias docker='podman'
fi

# docker

## docker Logs
alias dl='docker ps --format "{{.Names}}" | fzf | xargs docker logs -f --tail 100'

## docker Restart
alias dr='docker ps --format "{{.Names}}" | fzf | xargs docker restart'

## docker Stop
alias ds='docker ps --format "{{.Names}}" | fzf | xargs docker stop'

# docker compose
alias dc='docker compose'

## docker compose Logs
alias dcl='docker compose ls | tail -n +2 | fzf | rev | cut -d" " -f1 | rev | sed "s#docker-compose.yml##" | xargs -I {} sh -c "cd {} && docker compose logs -f --tail 100"'

## docker compose Ps
alias dcp='docker compose ls | tail -n +2 | fzf | rev | cut -d" " -f1 | rev | sed "s#docker-compose.yml##" | xargs -I {} sh -c "cd {} && docker compose ps"'

## docker compose Restart
alias dcr='docker compose ls | tail -n +2 | fzf | rev | cut -d" " -f1 | rev | sed "s#docker-compose.yml##" | xargs -I {} sh -c "cd {} && docker compose restart"'

## docker compose Down
alias dcd='docker compose ls | tail -n +2 | fzf | rev | cut -d" " -f1 | rev | sed "s#docker-compose.yml##" | xargs -I {} sh -c "cd {} && docker compose down"'

# thefuck

## If thefuck is installed, install command, else tell the user is is a good idea to install thefuck

if command -v thefuck &> /dev/null
then
    eval $(thefuck --alias)
else
    echo -e "${warning_color}thefuck is not installed, it is a good idea to install it.${no_color}"
fi

# transfer.sh

upload() {
    if [ -f "$1" ]; then
        curl -sD - --progress-bar --upload-file "$1" https://transfer.ozeliurs.com/$(basename "$1") &> /tmp/tsh.url
        
        if [ -s /tmp/tsh.url ]; then
            echo "**********************************"
            echo "URL is: $(tail -n1 /tmp/tsh.url)"
            echo "Deletion Token is: $(grep X-Url-Delete /tmp/tsh.url | awk -F "/" '{print $NF}')"
            echo "**********************************"
        else
            echo "NO URL-File found !!"
        fi
    else
        echo "!!!!!!"
        echo "\"$1\" not found !!"
        echo "!!!!!!"
    fi
}

alias up=upload

# Ip Info from http://ip-api.com

ipd() {
    if [ -z "$1" ]; then
        ip=$(curl -s http://checkip.amazonaws.com/)
    else
        ip=$1
    fi

    response=$(curl -s "http://ip-api.com/json/$1?fields=66846719")

    echo "================================"
    echo "IP: $(echo $response | jq -r '.query')"
    echo "[$(echo $response | jq -r '.reverse')]"
    echo "--------------------------------"
    echo "$(echo $response | jq -r '.city') ($(echo $response | jq -r '.country'))"
    echo "$(echo $response | jq -r '.lat'), $(echo $response | jq -r '.lon')"
    echo "--------------------------------"
    echo "ISP: $(echo $response | jq -r '.isp')"
    echo "AS: $(echo $response | jq -r '.as')"

    echo -n "IP Type: "
    [ "$(echo $response | jq -r '.mobile')" = "true" ] && echo -n "Mobile "
    [ "$(echo $response | jq -r '.proxy')" = "true" ] && echo -n "Proxy "
    [ "$(echo $response | jq -r '.hosting')" = "true" ] && echo -n "Hosting"
    echo ""
    echo "================================"
}

gen_crt() {
    local domain="$1"
    acme.sh --issue --dns dns_cf -d "$domain" -d "*.$domain" --key-file "/home/debian/.acme.sh/pem/$domain-privkey.pem" --fullchain-file "/home/debian/.acme.sh/pem/$domain-fullchain.pem"
}


ngensite() {
    local site="$1"
    sudo ln -s /etc/nginx/sites-available/"$site" /etc/nginx/sites-enabled/
}

# Enable autocomplete for the function
# Register the autocomplete function for the ngensite command
if command -v complete &> /dev/null
then
    _ngensite_completions() {
        local cur_word="${COMP_WORDS[COMP_CWORD]}"
        local available_sites=$(ls /etc/nginx/sites-available)

        COMPREPLY=( $(compgen -W "${available_sites}" -- ${cur_word}) )
    }

    complete -F _ngensite_completions ngensite
fi